import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
from io import StringIO

uploaded = files.upload()
file_content = list(uploaded.values())[0].decode('utf-8')
df = pd.read_csv(StringIO(file_content))

df = df.dropna()
assert pd.api.types.is_numeric_dtype(df['median_house_value']), "Target must be numeric."
drop_cols = ['total_bedrooms', 'population', 'households']
df = df.drop(columns=drop_cols, errors='ignore')
df = pd.get_dummies(df, drop_first=True)

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

features = df.drop(columns=['median_house_value']).columns.tolist()
df[features] = (df[features] - df[features].mean()) / df[features].std()
target = 'median_house_value'
y_mean, y_std = df[target].mean(), df[target].std()
df[target] = (df[target] - y_mean) / y_std
df['bias'] = 1.0
features = ['bias'] + features

train_df = df.sample(frac=0.8, random_state=42)
test_df = df.drop(train_df.index)
X_train = train_df[features].values
y_train = train_df[target].values.reshape(-1, 1)
X_test = test_df[features].values
y_test = test_df[target].values.reshape(-1, 1)

weights = np.zeros((X_train.shape[1], 1))
alpha = 0.01
epochs = 500
losses = []

for epoch in range(epochs):
    preds = X_train @ weights
    error = preds - y_train
    gradients = (X_train.T @ error) / X_train.shape[0]
    weights -= alpha * gradients
    mse = np.mean(error ** 2)
    losses.append(mse)

plt.plot(range(epochs), losses)
plt.title("Training Loss (MSE)")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.grid(True)
plt.show()

final_preds = (X_test @ weights) * y_std + y_mean
true_vals = y_test * y_std + y_mean
mae = np.mean(np.abs(final_preds - true_vals))
rmse = np.sqrt(np.mean((final_preds - true_vals) ** 2))
y_avg = np.mean(true_vals)
ss_total = np.sum((true_vals - y_avg) ** 2)
ss_res = np.sum((true_vals - final_preds) ** 2)
r2 = 1 - (ss_res / ss_total)

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"R^2 Score: {r2:.4f}")
