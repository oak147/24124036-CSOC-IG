import pandas as pd
import numpy as np
from google.colab import files
from io import StringIO
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

uploaded = files.upload()
file_content = list(uploaded.values())[0].decode('utf-8')
df = pd.read_csv(StringIO(file_content))

df = df.dropna()
drop_cols = ['total_bedrooms', 'population', 'households']
df = df.drop(columns=drop_cols, errors='ignore')
df = pd.get_dummies(df, drop_first=True)

features = df.drop(columns=['median_house_value']).columns.tolist()
df[features] = (df[features] - df[features].mean()) / df[features].std()
y_mean, y_std = df['median_house_value'].mean(), df['median_house_value'].std()
df['median_house_value'] = (df['median_house_value'] - y_mean) / y_std

train_df = df.sample(frac=0.8, random_state=42)
test_df = df.drop(train_df.index)
X_train = train_df.drop(columns=['median_house_value']).values
y_train = train_df['median_house_value'].values
X_test = test_df.drop(columns=['median_house_value']).values
y_test = test_df['median_house_value'].values

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test) * y_std + y_mean
true_vals = y_test * y_std + y_mean

mae = mean_absolute_error(true_vals, y_pred)
rmse = np.sqrt(mean_squared_error(true_vals, y_pred))
r2 = r2_score(true_vals, y_pred)

print(f"MAE: {mae:.2f}, RMSE: {rmse:.2f}, RÂ²: {r2:.4f}")
